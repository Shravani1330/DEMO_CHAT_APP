1.) Manifest file ----------- (i)

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
   package="com.shravani.demochatapp">

   <uses-permission android:name="android.permission.INTERNET" />
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
   <application
       android:allowBackup="true"
       android:icon="@mipmap/ic_launcher"
       android:label="@string/app_name"
       android:roundIcon="@mipmap/ic_launcher_round"
       android:supportsRtl="true"
       android:theme="@style/AppTheme">
       <activity android:name=".MessageActivity"></activity>
       <activity android:name=".ResetPasswordActivity" />
       <activity android:name=".RegisterActivity" />
       <activity android:name=".LoginActivity" />
       <activity android:name=".StartActivity">
           <intent-filter>
               <action android:name="android.intent.action.MAIN" />

               <category android:name="android.intent.category.LAUNCHER" />
           </intent-filter>
       </activity>
       <activity android:name=".MainActivity"></activity>
   </application>

</manifest>

2.) MessageAdapter.java-----------------(ii)

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.example.demochatapp.Model.Chat;
import com.example.demochatapp.R;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

import java.util.List;

public class MessageAdapter extends RecyclerView.Adapter<MessageAdapter.ViewHolder> {

   static final int MSG_TYPE_LEFT =0;
   static final int MSG_TYPE_RIGHT =1;

   Context mContext;
   List<Chat> mchat;
   String imageURL;
   FirebaseUser fuser;

   public MessageAdapter(Context mContext, List<Chat> mchat, String imageURL) {
       this.mContext = mContext;
       this.mchat = mchat;
       this.imageURL = imageURL;
   }


   @NonNull
   @Override
   public MessageAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
       if(viewType ==MSG_TYPE_RIGHT){
           View view = LayoutInflater.from(mContext).inflate(R.layout.chat_item_right,parent,false);
           return new MessageAdapter.ViewHolder(view);
       }else{
           View view = LayoutInflater.from(mContext).inflate(R.layout.chat_item_left,parent,false);
           return new MessageAdapter.ViewHolder(view);
       }
   }

   @Override
   public void onBindViewHolder(@NonNull MessageAdapter.ViewHolder holder, int position) {
       Chat chat = mchat.get(position);
       holder.show_message.setText(chat.getMessage());
       if(imageURL.equals("default")){
           holder.profile_image.setImageResource(R.mipmap.ic_launcher);
       }else{
           Glide.with(mContext).load(imageURL).into(holder.profile_image);
       }
       if(position==mchat.size()-1){
           if(chat.isIsseen()){
               holder.txt_seen.setText("SEEN");
           }else{
               holder.txt_seen.setText("DELIVERY SUCCESSFUL");
           }
       }else{
           holder.txt_seen.setVisibility(View.GONE);
       }
   }

   @Override
   public int getItemCount() {
       return mchat.size();
   }
 class  ViewHolder extends RecyclerView.ViewHolder{
       TextView show_message;
       ImageView profile_image;
       TextView txt_seen;

     public ViewHolder(@NonNull View itemView) {
         super(itemView);
     show_message = itemView.findViewById(R.id.show_message);
     profile_image=itemView.findViewById(R.id.profile_image);
     txt_seen = itemView.findViewById(R.id.txt_seen);
     }
 }

   @Override
   public int getItemViewType(int position) {
       fuser = FirebaseAuth.getInstance().getCurrentUser();
       if(mchat.get(position).getSender().equals(fuser.getUid())) {
           return MSG_TYPE_RIGHT;

       }else{
               return  MSG_TYPE_LEFT;
           }
       }

}

3.) UserAdapter.java-------------------(iii)

import android.content.Context;
import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.example.demochatapp.MessageActivity;
import com.example.demochatapp.Model.Chat;
import com.example.demochatapp.Model.User;
import com.example.demochatapp.R;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.List;

public class UserAdapter extends RecyclerView.Adapter<UserAdapter.ViewHolder> {

Context mContext;
List<User> mUsers;
boolean ischat;
String theLastMessage;

   public UserAdapter(Context mContext, List<User> mUsers, boolean ischat) {
       this.mContext = mContext;
       this.mUsers = mUsers;
       this.ischat = ischat;
   }

   @NonNull
   @Override
   public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
       View view = LayoutInflater.from(mContext).inflate(R.layout.user_item,parent,false);
       return new UserAdapter.ViewHolder(view);
   }

   @Override
   public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
       final User user = mUsers.get(position);
       holder.username.setText(user.getUsername());
       if("default".equals(user.getImageURL())){
           holder.profile_image.setImageResource(R.mipmap.ic_launcher);
       }else{
           Glide.with(mContext).load(user.getImageURL()).into(holder.profile_image);
       }
       if(ischat){
           lastmessage(user.getId(),holder.last_msg);
       }else{
           holder.last_msg.setVisibility(View.GONE);
       }
       if(ischat){
        if(user.getStatus().equals("online")){
            holder.img_on.setVisibility(View.VISIBLE);
           holder.img_off.setVisibility(View.GONE);
        }
       else{
           holder.img_on.setVisibility(View.GONE);
           holder.img_off.setVisibility(View.VISIBLE);
       }

       }else{

       holder.img_on.setVisibility(View.GONE);
       holder.img_off.setVisibility(View.GONE);
   }
   holder.itemView.setOnClickListener(new View.OnClickListener() {
       @Override
       public void onClick(View view) {
           Intent intent = new Intent(mContext, MessageActivity.class);
           intent.putExtra("userid",user.getId());
           mContext.startActivity(intent);
       }
   });

   }

   @Override
   public int getItemCount() {
       return mUsers.size();
   }


   class  ViewHolder extends RecyclerView.ViewHolder{

    public TextView username;
    public ImageView profile_image;
    private ImageView img_on;
    private ImageView img_off;
    private TextView last_msg;
    public ViewHolder(@NonNull View itemView) {
        super(itemView);
        username = itemView.findViewById(R.id.username);
        profile_image = itemView.findViewById(R.id.profile_image);
        img_on= itemView.findViewById(R.id.img_on);
        img_off = itemView.findViewById(R.id.img_off);
        last_msg = itemView.findViewById(R.id.last_msg);
    }
}

private void lastmessage(final String userid, final TextView last_msg){
       theLastMessage="default";
    final FirebaseUser firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
    DatabaseReference reference = FirebaseDatabase.getInstance().getReference("Chats");

    reference.addValueEventListener(new ValueEventListener() {
        @Override
        public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
            for(DataSnapshot snapshot: dataSnapshot.getChildren()){
                Chat chat = snapshot.getValue(Chat.class);

   if((firebaseUser.getUid().equals(chat.getReceiver())&& userid.equals(chat.getSender())|| (firebaseUser.getUid().equals(chat.getSender())) && userid.equals(chat.getReceiver()))){
    theLastMessage = chat.getMessage();
                }
            }
            switch (theLastMessage){
                case "default":
                    last_msg.setText("NOTHING TO SHOW");
                    Break;	
                default:
                    last_msg.setText(theLastMessage);
                    break;
            }
            theLastMessage ="default";
        }

        @Override
        public void onCancelled(@NonNull DatabaseError databaseError) {

        }
    });

}
}

4.) Chat.java--------------(iv)


package="com.shravani.demochatapp">
import javax.xml.transform.sax.SAXResult;

public class Chat  {

   private  String sender;
   private  String receiver;
   private String message;
   private boolean isseen;

   public Chat(String sender, String receiver, String message, boolean isseen) {
       this.sender = sender;
       this.receiver = receiver;
       this.message = message;
       this.isseen = isseen;
   }
   Chat(){


   }

   public String getSender() {
       return sender;
   }

   public void setSender(String sender) {
       this.sender = sender;
   }

   public String getReceiver() {
       return receiver;
   }

   public void setReceiver(String receiver) {
       this.receiver = receiver;
   }

   public String getMessage() {
       return message;
   }

   public void setMessage(String message) {
       this.message = message;
   }

   public boolean isIsseen() {
       return isseen;
   }

   public void setIsseen(boolean isseen) {
       this.isseen = isseen;
   }
}

5.) chatList.java--------------(v)

package="com.shravani.demochatapp">
public class Chatlist {
   private String id;

   public Chatlist(String id) {
       this.id = id;
   }

   public Chatlist() {
   }

   public String getId() {
       return id;
   }

   public void setId(String id) {
       this.id = id;
   }
}

6.) User.java----------------(vi)

public class User  {
   private String id;
   private String username;
   private String imageURL;
   private String status;
   private String search;

   public User(String id, String username, String imageURL, String status, String search) {
       this.id = id;
       this.username = username;
       this.imageURL = imageURL;
       this.status = status;
       this.search = search;
   }

   public User() {
   }

   public String getId() {
       return id;
   }

   public void setId(String id) {
       this.id = id;
   }

   public String getUsername() {
       return username;
   }

   public void setUsername(String username) {
       this.username = username;
   }

   public String getImageURL() {
       return imageURL;
   }

   public void setImageURL(String imageURL) {
       this.imageURL = imageURL;
   }

   public String getStatus() {
       return status;
   }

   public void setStatus(String status) {
       this.status = status;
   }

   public String getSearch() {
       return search;
   }

   public void setSearch(String search) {
       this.search = search;
   }
}

6.) StartActivity.java

package="com.shravani.demochatapp">

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import com.google.firebase.FirebaseApp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

public class StartActivity extends AppCompatActivity {
       Button login,register;
       FirebaseUser firebaseUser;


   @Override
   protected void onStart() {
       super.onStart();
       FirebaseApp.initializeApp(this);
       firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
       if(firebaseUser !=null){
           Intent intent = new Intent(StartActivity.this,MainActivity.class);
           startActivity(intent);
           finish();
       }
   }

   @Override
   protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       setContentView(R.layout.activity_start);
       login = findViewById(R.id.login);
       register = findViewById(R.id.register);
       login.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               startActivity(new Intent(StartActivity.this,LoginActivity.class));
           }
       });
       register.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               startActivity(new Intent(StartActivity.this,RegisterActivity.class));
           }
       });
   }
}

7.) LoginActivity.java

package com.example.demochatapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.rengwuxian.materialedittext.MaterialEditText;

public class LoginActivity extends AppCompatActivity {
   MaterialEditText email, password;
   Button btn_login;

   FirebaseAuth auth;
   TextView forgot_password;

   @Override
   protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       setContentView(R.layout.activity_login);
       Toolbar toolbar = findViewById(R.id.toolbar);
       setSupportActionBar(toolbar);
       getSupportActionBar().setTitle("Login");
       getSupportActionBar().setDisplayHomeAsUpEnabled(true);

       auth = FirebaseAuth.getInstance();

       email = findViewById(R.id.email);
       password = findViewById(R.id.password);
       btn_login = findViewById(R.id.btn_login);
       forgot_password = findViewById(R.id.forgot_password);
       forgot_password.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               startActivity(new Intent(LoginActivity.this, ResetPasswordActivity.class));
           }
       });
       btn_login.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               String txt_email = email.getText().toString();
               String txt_password = password.getText().toString();
               if(TextUtils.isEmpty(txt_email)|| TextUtils.isEmpty(txt_password)){
                   Toast.makeText(LoginActivity.this, "All fields are required", Toast.LENGTH_SHORT).show();
               }
               else {
                   auth.signInWithEmailAndPassword(txt_email,txt_password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {
                       @Override
                       public void onComplete(@NonNull Task<AuthResult> task) {
                           if(task.isSuccessful()){
                               Intent intent= new Intent(LoginActivity.this,MainActivity.class);
                               intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
                               startActivity(intent);
                               finish();
                           }
                       }
                   });
               }

           }
       });
   }
}

8.) Register.activity.java

package com.example.demochatapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.rengwuxian.materialedittext.MaterialEditText;

import java.util.HashMap;

public class RegisterActivity extends AppCompatActivity {

   MaterialEditText username,email,password;
   Button btn_register;
   FirebaseAuth auth;
   DatabaseReference reference;

   @Override
   protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       setContentView(R.layout.activity_register);

       Toolbar toolbar = findViewById(R.id.toolbar);
       setSupportActionBar(toolbar);
       getSupportActionBar().setTitle("Register");
       getSupportActionBar().setDisplayHomeAsUpEnabled(true);

       username = findViewById(R.id.username);
       email = findViewById(R.id.email);
       password = findViewById(R.id.password);
       btn_register = findViewById(R.id.btn_register);
       auth = FirebaseAuth.getInstance();

       btn_register.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               String txt_username = username.getText().toString();
               String txt_email = email.getText().toString();
               String txt_password = password.getText().toString();
               if(TextUtils.isEmpty(txt_username ) || TextUtils.isEmpty(txt_email) || TextUtils.isEmpty(txt_password))
               {
                   Toast.makeText(RegisterActivity.this, "All fields are required", Toast.LENGTH_SHORT).show();
               }else if ( txt_password.length() < 6){
                   Toast.makeText(RegisterActivity.this, "Password must be atleast 6 characters", Toast.LENGTH_SHORT).show();
               }else{
                   register(txt_username,txt_email,txt_password);
               }
           }
       });


   }
   public void register(final String username, String email, String password){

       auth.createUserWithEmailAndPassword(email,password)
               .addOnCompleteListener(
                       new OnCompleteListener<AuthResult>() {
                           @Override
                           public void onComplete(@NonNull Task<AuthResult> task) {
                               if(task.isSuccessful()){
                                   FirebaseUser firebaseUser = auth.getCurrentUser();
                                   String userid =firebaseUser.getUid();
                                   reference = FirebaseDatabase.getInstance().getReference("Users").child(userid);
                                   HashMap<String,String> hashMap = new HashMap<>();
                                   hashMap.put("id",userid);
                                   hashMap.put("username",username);
                                   hashMap.put("imageURL","default");
                                   hashMap.put("status","offline");
                                   hashMap.put("search",username.toLowerCase());

                               reference.setValue(hashMap).addOnCompleteListener(new OnCompleteListener<Void>() {

                                   @Override
                                   public void onComplete(@NonNull Task<Void> task) {
                                       if (task.isSuccessful()) {
                                           Intent intent = new Intent(RegisterActivity.this, MainActivity.class);
                                           intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
                                           startActivity(intent);
                                           finish();
                                       }
                                   }
                               });



                           }
                               else{
                               Toast.makeText(RegisterActivity.this,"You can't have this email or password for registration",Toast.LENGTH_LONG).show();
                               }
                           }
                       }
               );

   }

   }

9.) Reset.password

package com.example.demochatapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.rengwuxian.materialedittext.MaterialEditText;

public class ResetPasswordActivity extends AppCompatActivity {
  MaterialEditText send_email;
  Button btn_reset;
  FirebaseAuth firebaseAuth;
   @Override
   protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       setContentView(R.layout.activity_reset_password);
       Toolbar toolbar = findViewById(R.id.toolbar);
       setSupportActionBar(toolbar);
       getSupportActionBar().setTitle("Reset Password");
       getSupportActionBar().setDisplayHomeAsUpEnabled(true);

       send_email = findViewById(R.id.send_email);
       btn_reset = findViewById(R.id.btn_reset);

       firebaseAuth = FirebaseAuth.getInstance();
       btn_reset.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               String email = send_email.getText().toString();
               if (email.equals("")) {
                   Toast.makeText(ResetPasswordActivity.this, "All fields are required", Toast.LENGTH_SHORT).show();
               } else {
                   firebaseAuth.sendPasswordResetEmail(email).addOnCompleteListener(new OnCompleteListener<Void>() {
                       @Override
                       public void onComplete(@NonNull Task<Void> task) {
                           if (task.isSuccessful()) {
                               Toast.makeText(ResetPasswordActivity.this, "Please check your EMAIL-ID", Toast.LENGTH_SHORT).show();
                               startActivity(new Intent(ResetPasswordActivity.this, LoginActivity.class));
                           } else {
                               String error = task.getException().getMessage();
                               Toast.makeText(ResetPasswordActivity.this, error, Toast.LENGTH_SHORT).show();
                           }
                       }
                   });
               }
           }
       });
   }
}

10.) MainActivity.java

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentPagerAdapter;
import androidx.viewpager.widget.ViewPager;

import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.example.demochatapp.Fragments.ChatsFragment;
import com.example.demochatapp.Fragments.ProfileFragment;
import com.example.demochatapp.Fragments.UsersFragment;
import com.example.demochatapp.Model.Chat;
import com.example.demochatapp.Model.User;
import com.google.android.material.tabs.TabLayout;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.HashMap;

import de.hdodenhof.circleimageview.CircleImageView;

public class MainActivity extends AppCompatActivity {
   CircleImageView profile_image;
   TextView username;
   FirebaseUser firebaseUser;
   DatabaseReference reference;
   @Override
   protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       setContentView(R.layout.activity_main);
       Toolbar toolbar = findViewById(R.id.toolbar);
       setSupportActionBar(toolbar);
       getSupportActionBar().setTitle("");
       getSupportActionBar().setDisplayHomeAsUpEnabled(true);

       profile_image = findViewById(R.id.profile_image);
       username = findViewById(R.id.username);
       firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
       reference = FirebaseDatabase.getInstance().getReference("Users")
               .child(firebaseUser.getUid());
       reference.addValueEventListener(new ValueEventListener() {
           @Override
           public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
               User user = dataSnapshot.getValue(User.class);
               username.setText(user.getUsername());
               if ("default".equals(user.getImageURL())) {
                   profile_image.setImageResource(R.mipmap.ic_launcher);

               } else {
                   Glide.with(getApplicationContext()).load(user.getImageURL()).into(profile_image);
               }
           }

           @Override
           public void onCancelled(@NonNull DatabaseError databaseError) {

           }
       });
       final TabLayout tabLayout = findViewById(R.id.tab_layout);
       final ViewPager viewPager = findViewById(R.id.view_pager);

       reference = FirebaseDatabase.getInstance().getReference("Chats");
       reference.addValueEventListener(new ValueEventListener() {
           @Override
           public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
               ViewPagerAdapter viewPagerAdapter = new ViewPagerAdapter(getSupportFragmentManager());
               int unread=0;
               for(DataSnapshot snapshot:dataSnapshot.getChildren()){
                   Chat chat = snapshot.getValue(Chat.class);
                   if(chat.getReceiver().equals(firebaseUser.getUid())&& !chat.isIsseen()){
                       unread++;
                   }
               }
               if(unread==0){
                   viewPagerAdapter.addFragment(new ChatsFragment(),"Chats");
               }else{
                   viewPagerAdapter.addFragment(new ChatsFragment(),"("+unread+")" +"Chats");

               }
               viewPagerAdapter.addFragment(new UsersFragment(), "Users");
               viewPagerAdapter.addFragment(new ProfileFragment(), "Profile");

               viewPager.setAdapter(viewPagerAdapter);
               tabLayout.setupWithViewPager(viewPager);
           }

           @Override
           public void onCancelled(@NonNull DatabaseError databaseError) {

           }
       });

   }

   @Override
   public boolean onCreateOptionsMenu(Menu menu) {
       getMenuInflater().inflate(R.menu.menu,menu);
       return true;
   }

   @Override
   public boolean onOptionsItemSelected(@NonNull MenuItem item) {
       switch (item.getItemId()){
           case R.id.logout:
               FirebaseAuth.getInstance().signOut();
               startActivity(new Intent(MainActivity.this,StartActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
               finish();
               return true;
       }

       return false;
   }

   class ViewPagerAdapter extends FragmentPagerAdapter{

       private ArrayList<Fragment> fragments;
       private ArrayList<String> titles;

       public ViewPagerAdapter(@NonNull FragmentManager fm) {
           super(fm);
           this.fragments= new ArrayList<>();
           this.titles= new ArrayList<>();
       }


       @NonNull
       @Override
       public Fragment getItem(int position) {
           return fragments.get(position);
       }

       @Override
       public int getCount() {
           return fragments.size();
       }

       public void addFragment(Fragment fragment,String title){
           fragments.add(fragment);
           titles.add(title);
       }

       @Nullable
       @Override
       public CharSequence getPageTitle(int position) {
           return titles.get(position);
       }
   }
private void status(String status){
       reference = FirebaseDatabase.getInstance().getReference("Users").child(firebaseUser.getUid());
       HashMap<String,Object> hashMap = new HashMap<>();
       hashMap.put("status",status);
       reference.updateChildren(hashMap);
}
@Override
   protected void onResume(){
       super.onResume();
       status("onLINE");
}
   @Override
   protected void onPause(){
       super.onPause();
       status("OFFLINE");
   }
}

11.) MessageActivity.Activity.java

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.example.demochatapp.Adapter.MessageAdapter;
import com.example.demochatapp.Model.Chat;
import com.example.demochatapp.Model.User;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import de.hdodenhof.circleimageview.CircleImageView;

public class MessageActivity extends AppCompatActivity {
   CircleImageView profile_image;
   TextView username;

   FirebaseUser fuser;
   DatabaseReference reference;

   ImageButton btn_send;
   EditText text_send;
   String userid;

   MessageAdapter messageAdapter;
   List<Chat> mChat;

   RecyclerView recyclerView;

   Intent intent;
   ValueEventListener seenListener;
   @Override
   protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       setContentView(R.layout.activity_message);
       Toolbar toolbar = findViewById(R.id.toolbar);
       setSupportActionBar(toolbar);
       getSupportActionBar().setTitle("");
       toolbar.setNavigationOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               startActivity(new Intent(MessageActivity.this, MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
           }
       });

       recyclerView = findViewById(R.id.recycler_view);
       recyclerView.setHasFixedSize(true);
       LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getApplicationContext());
       linearLayoutManager.setStackFromEnd(true);
       recyclerView.setLayoutManager(linearLayoutManager);

       profile_image = findViewById(R.id.profile_image);
       username = findViewById(R.id.username);
       btn_send = findViewById(R.id.btn_send);
       text_send = findViewById(R.id.text_send);

       intent = getIntent();
       userid = intent.getStringExtra("userid");
       btn_send.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               String msg = text_send.getText().toString();
               if(!msg.equals("")){
                   sendMessage(fuser.getUid(),userid,msg);
               }else{
                   Toast.makeText(getApplicationContext(),"You can't send empty message",Toast.LENGTH_LONG).show();
               }
               text_send.setText("");
           }
       });
       fuser = FirebaseAuth.getInstance().getCurrentUser();
       reference = FirebaseDatabase.getInstance().getReference("Users").child(userid);
   reference.addValueEventListener(new ValueEventListener() {
       @Override
       public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
           User user = dataSnapshot.getValue(User.class);
           username.setText(user.getUsername());
           if("default".equals(user.getImageURL())){
               profile_image.setImageResource(R.mipmap.ic_launcher);
           }else{
               Glide.with(getApplicationContext()).load(user.getImageURL()).into(profile_image);
           }
           readMessages(fuser.getUid(),userid,user.getImageURL());

       }

       @Override
       public void onCancelled(@NonNull DatabaseError databaseError) {

       }
   });
   seenMessage(userid);
   }
   private void seenMessage(final String userid){
       reference = FirebaseDatabase.getInstance().getReference("Chats");
       seenListener = reference.addValueEventListener(new ValueEventListener() {
           @Override
           public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
               for(DataSnapshot snapshot: dataSnapshot.getChildren()){
                   Chat chat = snapshot.getValue(Chat.class);
                   if(chat.getReceiver().equals(fuser.getUid())&&chat.getSender().equals(userid)){
                       HashMap<String,Object> hashMap = new HashMap<>();
                       hashMap.put("isseen",true);
                       snapshot.getRef().updateChildren(hashMap);
                   }
               }
           }

           @Override
           public void onCancelled(@NonNull DatabaseError databaseError) {

           }
       });
   }
   private  void sendMessage(String sender,String receiver,String message){
       DatabaseReference reference = FirebaseDatabase.getInstance().getReference();
       HashMap<String,Object> hashMap = new HashMap<>();
       hashMap.put("sender",sender);
       hashMap.put("receiver",receiver);
       hashMap.put("message",message);
       hashMap.put("isseen",false);

       reference.child("Chats").push().setValue(hashMap);
       final DatabaseReference chatRef = FirebaseDatabase.getInstance().getReference("Chatlist").child(fuser.getUid()).child(userid);

       chatRef.addListenerForSingleValueEvent(new ValueEventListener() {
           @Override
           public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
               if(!dataSnapshot.exists()){
                   chatRef.child("id").setValue(userid);
               }
           }

           @Override
           public void onCancelled(@NonNull DatabaseError databaseError) {

           }
       });
   }
   private  void readMessages(final String myid, final String userid, final String imageurl){
       mChat = new ArrayList<>();
       reference = FirebaseDatabase.getInstance().getReference("Chats");
       reference.addValueEventListener(new ValueEventListener() {
           @Override
           public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
               mChat.clear();
               for(DataSnapshot snapshot: dataSnapshot.getChildren()){
               Chat chat = snapshot.getValue(Chat.class);
               if(chat.getReceiver().equals(myid)&& chat.getSender().equals(userid)|| chat.getReceiver().equals(userid)&& chat.getSender().equals(myid)){
                   mChat.add(chat);
               }
               messageAdapter = new MessageAdapter(MessageActivity.this,mChat,imageurl);
               recyclerView.setAdapter(messageAdapter);
               }
           }

           @Override
           public void onCancelled(@NonNull DatabaseError databaseError) {

           }
       });
   }


   private void status(String status){
       reference = FirebaseDatabase.getInstance().getReference("Users").child(fuser.getUid());

       HashMap<String, Object> hashMap = new HashMap<>();
       hashMap.put("status",status);
       reference.updateChildren(hashMap);
   }

   @Override
   protected  void onResume(){
       super.onResume();
       status("ONLINE");
   }
   @Override
   protected  void onPause(){
       super.onPause();
       status("OFFLINE");
   }
}

12.) Backgroundleft.xml(drawable window)

<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
  android:shape="rectangle">
<corners
   android:radius="10dp"
   android:topLeftRadius="0dp"  />
   <solid android:color="@android:color/white"/>
</shape>

13.) Backgroundright.xml(Drawable window)

<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
   android:shape="rectangle">
   <corners
       android:radius="10dp"
       android:topRightRadius="0dp"  />
   <solid android:color="@color/colorPrimary"/>
</shape>

14.) Style.xml

<resources>

   <!-- Base application theme. -->
   <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
       <!-- Customize your theme here. -->
       <item name="colorPrimary">@color/colorPrimary</item>
       <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
       <item name="colorAccent">@color/colorAccent</item>
   </style>

   <style name="MenuuStyle" parent="Theme.AppCompat.Light">

       <item name="android:background">@android:color/white</item>
   </style>

</resources>

15.) menu.xml

<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:app="http://schemas.android.com/apk/res-auto">
<item
   android:id="@+id/logout"
   android:title="LOG OUT"
   app:showAsAction="never"/>
</menu>

16.) Layout.xml

<?xml version="1.0" encoding="utf-8"?>
<androidx.appcompat.widget.Toolbar xmlns:android="http://schemas.android.com/apk/res/android"
   android:layout_width="match_parent"
   android:layout_height="wrap_content"
   xmlns:app="http://schemas.android.com/apk/res-auto"
   xmlns:tools="http://schemas.android.com/tools"
   android:orientation="vertical"
   android:id="@+id/toolbar"
   android:background="@color/colorPrimary"
   android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
   app:popupTheme="@style/MenuuStyle"
   tools:ignore="InvalidId">

</androidx.appcompat.widget.Toolbar>

➢	activity_start.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:app="http://schemas.android.com/apk/res-auto"
   xmlns:tools="http://schemas.android.com/tools"
   android:layout_width="match_parent"
   android:layout_height="match_parent"
   android:gravity="center"
   android:background="#FFFFFF"
   tools:context=".StartActivity">

   <TextView
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:text="Chat App"
       android:gravity="center"
       android:textColor="@color/colorPrimary"
       android:textSize="25sp"
       android:layout_marginBottom="24dp"
       android:id="@+id/tv"
       android:textStyle="bold"/>

   <Button
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:id="@+id/login"
       android:layout_marginTop="24dp"
       android:textColor="#FFFFFF"
       android:layout_marginBottom="24dp"
       android:layout_below="@+id/tv"
       android:text="Login"
       android:textStyle="bold"
       android:background="@color/colorPrimary"/>

   <Button
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:id="@+id/register"
       android:layout_marginTop="24dp"
       android:textColor="#FFFFFF"
       android:layout_below="@+id/login"
       android:text="Register"
       android:textStyle="bold"
       android:background="@color/colorPrimary"/>

</RelativeLayout>

17.) ActivityLogin.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
   xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:app="http://schemas.android.com/apk/res-auto"
   xmlns:tools="http://schemas.android.com/tools"
   android:layout_width="match_parent"
   android:layout_height="match_parent"
   tools:context=".LoginActivity">

   <include
       android:id="@+id/toolbar"
       layout="@layout/bar_layout"
       tools:ignore="InvalidId"
       />

   <LinearLayout
       android:orientation="vertical"
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:gravity="center_horizontal"
       android:padding="16dp"
       android:layout_below="@id/toolbar">

       <TextView
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:text="Login"
           android:gravity="center"
           android:textSize="25sp"
           android:textStyle="bold"
           />

       <com.rengwuxian.materialedittext.MaterialEditText
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:id="@+id/email"
           android:inputType="textEmailAddress"
           android:layout_marginTop="10dp"
           app:met_floatingLabel="normal"
           android:hint="Email"/>

       <com.rengwuxian.materialedittext.MaterialEditText
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:id="@+id/password"
           android:inputType="textPassword"
           android:layout_marginTop="10dp"
           app:met_floatingLabel="normal"
           android:hint="Password"/>

       <Button
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:gravity="center"
           android:text="Login"
           android:layout_marginTop="10dp"
           android:id="@+id/btn_login"
           android:background="@color/colorPrimary"
           android:textColor="#FFFFFF"
           android:textStyle="bold"
           />
       <TextView
           android:id="@+id/forgot_password"
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:text="Forgot your password ?"
           android:gravity="end"
           android:layout_gravity="end"
           android:textColor="@color/colorPrimary"
           android:layout_marginTop="10dp"
           android:textSize="18sp"
           android:textStyle="bold"
           />

   </LinearLayout>

</RelativeLayout>

18.) RESETpassword.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:app="http://schemas.android.com/apk/res-auto"
   xmlns:tools="http://schemas.android.com/tools"
   android:layout_width="match_parent"
   android:layout_height="match_parent"
   tools:context=".ResetPasswordActivity">

   <include
       android:id="@+id/toolbar"
       layout="@layout/bar_layout"
       tools:ignore="InvalidId"
       />
   <LinearLayout
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:orientation="vertical"
       android:layout_below="@id/toolbar"
       android:padding="16dp">

       <com.rengwuxian.materialedittext.MaterialEditText
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:id="@+id/send_email"
           android:inputType="textEmailAddress"
           app:met_floatingLabel="normal"
           android:hint="Your email"
           android:layout_marginTop="20dp"/>

       <Button
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:text="Reset"
           android:id="@+id/btn_reset"
           android:textColor="#FFFFFF"
           android:background="@color/colorPrimary"
           android:layout_marginTop="15dp"/>

       <TextView
           android:layout_width="wrap_content"
           android:layout_height="wrap_content"
           android:gravity="center"
           android:layout_marginTop="14dp"
           android:textColor="#000000"
           android:textSize="18sp"
           android:text="ON CLICK YOU WILL GET AND MESSAGE REGARDING IT."/>

   </LinearLayout>


</RelativeLayout>

19.) USERITEM.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:layout_width="match_parent"
   android:layout_height="wrap_content"
   xmlns:app="http://schemas.android.com/apk/res-auto"
   android:padding="10dp">
<de.hdodenhof.circleimageview.CircleImageView
   android:layout_width="50dp"
   android:layout_height="50dp"
   android:src="@mipmap/ic_launcher"
   android:id="@+id/profile_image"/>

   <TextView
       android:layout_width="wrap_content"
       android:layout_height="wrap_content"
       android:text="Username"
       android:layout_toEndOf="@id/profile_image"
       android:layout_marginStart="10dp"
       android:layout_centerVertical="true"
       android:textSize="18sp"
       android:id="@+id/username"/>

   <de.hdodenhof.circleimageview.CircleImageView
       android:layout_width="15dp"
       android:layout_height="15dp"
       app:civ_border_width="10dp"
       app:civ_border_color="#05df29"
       android:src="@mipmap/ic_launcher"
       android:id="@+id/img_on"
       android:visibility="gone"
       android:layout_below="@id/username"
       android:layout_marginTop="10dp"
       android:layout_marginLeft="-15dp"
       android:layout_toRightOf="@id/profile_image"
       android:layout_toEndOf="@id/profile_image"
       />

   <de.hdodenhof.circleimageview.CircleImageView
       android:layout_width="13dp"
       android:layout_height="13dp"
       app:civ_border_width="10dp"
       app:civ_border_color="#FFFFFF"
       android:src="@mipmap/ic_launcher"
       android:id="@+id/img_off"
       android:visibility="gone"
       android:layout_below="@id/username"
       android:layout_marginTop="14dp"
       android:layout_marginLeft="-13dp"
       android:layout_toRightOf="@id/profile_image"
       android:layout_toEndOf="@id/profile_image"
       />

   <TextView
       android:layout_width="wrap_content"
       android:layout_height="wrap_content"
       android:layout_below="@id/username"
       android:layout_toRightOf="@id/profile_image"
       android:layout_marginTop="5dp"
       android:paddingTop="5dp"
       android:id="@+id/last_msg"
       android:textColor="@color/colorPrimaryDark"
       android:layout_marginLeft="18dp"
       android:maxLines="1"/>

</RelativeLayout>

20.)ChatItem_left.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:orientation="vertical" android:layout_width="300dp"
   android:padding="8dp"
   android:layout_height="wrap_content">

   <de.hdodenhof.circleimageview.CircleImageView
       android:layout_width="30dp"
       android:layout_height="30dp"
       android:id="@+id/profile_image"
       android:src="@mipmap/ic_launcher"/>
   <TextView
       android:layout_width="wrap_content"
       android:layout_height="wrap_content"
       android:layout_marginLeft="5dp"
       android:layout_toEndOf="@+id/profile_image"
       android:id="@+id/show_message"
       android:text="Hello"
       android:padding="8dp"
       android:background="@drawable/background_left"
       android:layout_marginStart="25dp"/>

   <TextView
       android:layout_width="wrap_content"
       android:layout_height="wrap_content"
       android:id="@+id/txt_seen"
       android:layout_below="@id/show_message"
       android:visibility="gone"/>
</RelativeLayout>

21.) chatItem_RIGHT.xml

➢	chat_item_right.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:layout_width="match_parent"
   android:layout_height="wrap_content"
   android:padding="8dp">

   <RelativeLayout
       android:layout_width="300dp"
       android:layout_height="wrap_content"
       android:layout_alignParentEnd="true">
       <de.hdodenhof.circleimageview.CircleImageView
           android:layout_width="wrap_content"
           android:layout_height="wrap_content"
           android:id="@+id/profile_image"
           android:visibility="NONE"/>

       <TextView
           android:layout_width="wrap_content"
           android:layout_height="wrap_content"
           android:background="@drawable/background_right"
           android:text="hello"
           android:layout_alignParentEnd="true"
           android:layout_alignParentRight="true"
           android:id="@+id/show_message"
           android:textSize="18sp"
           android:textColor="#fff"
           android:padding="8dp"/>

       <TextView
           android:layout_width="wrap_content"
           android:layout_height="wrap_content"
           android:id="@+id/txt_seen"
           android:layout_below="@id/show_message"
           android:layout_alignParentRight="true"
           android:layout_alignParentEnd="true"/>

   </RelativeLayout>
</RelativeLayout>

21.)FRAGMENTS_CHAT.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:tools="http://schemas.android.com/tools"
   android:layout_width="match_parent"
   android:layout_height="match_parent"
   tools:context=".Fragments.ChatsFragment">

   <!-- TODO: Update blank fragment layout -->
<androidx.recyclerview.widget.RecyclerView
    android:id="@+id/recycler_view"
    android:layout_width="match_parent"
    android:layout_height="match_parent"/>

</RelativeLayout>

 22.) FRAGMENT_PROFILE.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
   xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:tools="http://schemas.android.com/tools"
   android:layout_width="match_parent"
   android:layout_height="match_parent"
   android:padding="8dp"
   tools:context=".Fragments.ProfileFragment">

   <androidx.cardview.widget.CardView
       android:layout_width="match_parent"
       android:layout_height="wrap_content">

   <RelativeLayout
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:padding="8dp">

       <TextView
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:text="Profile"
           android:textColor="@color/colorPrimary"
           android:textStyle="bold" />

       <de.hdodenhof.circleimageview.CircleImageView
           android:id="@+id/profile_image"
           android:layout_width="100dp"
           android:layout_height="100dp"
           android:layout_below="@id/profile_image"
           android:layout_centerHorizontal="true"
           android:src="@mipmap/ic_launcher" />

       <TextView
           android:id="@+id/username"
           android:layout_width="wrap_content"
           android:text="Username"
           android:layout_centerHorizontal="true"
           android:layout_marginTop="10dp"
           android:layout_below="@id/profile_image"
           android:layout_height="wrap_content"/>
   </RelativeLayout>
   </androidx.cardview.widget.CardView>
</RelativeLayout>

22.) Fragment_USERS.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:tools="http://schemas.android.com/tools"
   android:layout_width="match_parent"
   android:layout_height="match_parent"
   tools:context=".Fragments.UsersFragment">

   <EditText
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:layout_margin="5dp"
       android:hint="Search....."
       android:id="@+id/search_users"
       />
   <androidx.recyclerview.widget.RecyclerView
       android:layout_below="@id/search_users"
       android:layout_width="match_parent"
       android:layout_height="match_parent"
       android:id="@+id/recycler_view"
       />

